<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jason Morris</title><link>https://JasonMorrisSC.github.io/</link><description>Recent content on Jason Morris</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 09 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://JasonMorrisSC.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Blawx Development Update and Other News</title><link>https://JasonMorrisSC.github.io/post/2022-03-29_blawx_v1.3/</link><pubDate>Mon, 09 May 2022 00:00:00 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/2022-03-29_blawx_v1.3/</guid><description>It&amp;rsquo;s been a while since I did a blog about the changes to Blawx, so let&amp;rsquo;s get you caught up!
Spans For reasons that will be clear shortly, we needed a way to delineate and name parts of a paragraph of text. So I made some changes to CLEAN so that you can use the following format to be able to treat spans of legal text as though they were a sub-part of the law.</description></item><item><title>Recap of Rules As Code 2.0 Plenary</title><link>https://JasonMorrisSC.github.io/post/2022-03-14_rac2.0/</link><pubDate>Mon, 14 Mar 2022 17:58:57 -0600</pubDate><guid>https://JasonMorrisSC.github.io/post/2022-03-14_rac2.0/</guid><description>Rather than me repeating it here, you can check out my live tweet of the final session.
My Thoughts I&amp;rsquo;m not sure if I&amp;rsquo;m surprised, or not, but there was almost no consensus on anything, except that we should experiment concretely, not debate abstractly, the tools should be explainable, and the products of the work should be publicly accessible and usable, not behind proprietary technologies or pay walls.
Honestly, at LEAST getting consensus on the need for explainability is a step in the right direction.</description></item><item><title>New Blawx, Rules as Code 2.0 Plenary, SMU Conference Vids Available</title><link>https://JasonMorrisSC.github.io/post/2022-03-11_blawx_1.2a/</link><pubDate>Fri, 11 Mar 2022 10:40:53 -0700</pubDate><guid>https://JasonMorrisSC.github.io/post/2022-03-11_blawx_1.2a/</guid><description>TL;DR There is a new version of Blawx, live online, that allows you to edit legislation in a markdown-like language called Clean.
I will be participating in a conference on Monday on Rules as Code 2.0, looking at how we generate the skilled workforce that rules as code requires. Registration is free and highly recommended.
Videos from the SMU Computational Legal Studies conference are available online.
Blawx Update I&amp;rsquo;m working with the Canada School of Public Service on developing Blawx as a platform for learning projects in the Rules as Code space.</description></item><item><title>Introducing CLEAN - Markdown for Akoma Ntoso</title><link>https://JasonMorrisSC.github.io/post/2022-03-07_clean/</link><pubDate>Mon, 07 Mar 2022 23:23:43 -0700</pubDate><guid>https://JasonMorrisSC.github.io/post/2022-03-07_clean/</guid><description>The Problem I made a number of changes to Blawx that makes it possible to organize your code according to the pieces of the legislation. This is the first of a number of improvements that are all designed to let you use Blawx to do a structurally-isomorphic encoding of the legislation.
The problem was that the initial version did not provide any good way to edit the Akoma Ntoso source code for the legislation.</description></item><item><title>Code vs. No-Code</title><link>https://JasonMorrisSC.github.io/post/2022-02-24_no-code/</link><pubDate>Thu, 24 Feb 2022 12:59:22 -0700</pubDate><guid>https://JasonMorrisSC.github.io/post/2022-02-24_no-code/</guid><description>There was a conversation on Twitter this week that helped to clarify my thinking about something, and I wanted to share.
There is a sort of tension between &amp;ldquo;code&amp;rdquo; and &amp;ldquo;no-code&amp;rdquo; (sometimes &amp;ldquo;low-code&amp;rdquo;) solutions.
People who consider themselves software developers see people trying to use no-code solutions to do things that the no-code solutions are not good at, and they get frustrated that the capabilities of those tools has been overestimated.</description></item><item><title>Progress on Blawx, SMU Conference, Beeck Centre Rules as Code Paper</title><link>https://JasonMorrisSC.github.io/post/2022-02-24_blawx_progress/</link><pubDate>Thu, 24 Feb 2022 11:52:35 -0700</pubDate><guid>https://JasonMorrisSC.github.io/post/2022-02-24_blawx_progress/</guid><description>Progress on Blawx Just a quick note to let you know what I&amp;rsquo;ve been doing with Blawx over the last few weeks.
Blawx was originally a single web page that could contain a single workspace of code, much like an IDE that could only have one file open at a time. Version 1 changed that by creating &amp;ldquo;workspaces&amp;rdquo; that are saved server-side, and giving you the ability to create multiple workspaces and edit each one separately.</description></item><item><title>Using OpenFisca to Power Expert Systems in the Canadian Public Service: Lessons Learned</title><link>https://JasonMorrisSC.github.io/post/2022-03-02_openfisca_expert_systems/</link><pubDate>Wed, 16 Feb 2022 00:00:00 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/2022-03-02_openfisca_expert_systems/</guid><description>Using OpenFisca to Power Expert Systems in the Canadian Public Service: Lessons Learned This is a draft of a paper being prepared for the Singapore Management University Centre for Computational Law&amp;rsquo;s Computational Legal Studies Conference 2022.
Abstract The paper demonstrates an approach to encoding legislation in OpenFisca, and an approach to using the OpenFisca API, which in combination can be used to obtain many of the features required for legal expert system development.</description></item><item><title>Legal Documents in Blawx, Take 2</title><link>https://JasonMorrisSC.github.io/post/2022-03-08_legal_docs_take_2/</link><pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/2022-03-08_legal_docs_take_2/</guid><description>Background A couple of blog posts ago I talked about how I was working on a way of getting information about statutes into Blawx, so that they could be used for generating explanations, cross-references, and links to source material.
Playing around with it that way gave me what I needed to know in terms of the data structure that I needed to fill, but it also taught me that the block-based interface was painful for drafting rules.</description></item><item><title>Announcing Blawx v1.0.0-alpha</title><link>https://JasonMorrisSC.github.io/post/blawx_v1/</link><pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/blawx_v1/</guid><description>Announcing Blawx v1.0.0-alpha I&amp;rsquo;m very happy to announce the release of Blawx v1.0.0-alpha.
What is Blawx? Blawx is an open source, web-based, user-friendly tool for Rules as Code. It allows you to take what you know about laws, regulations, or contracts, and describe them to the computer in a simple but powerful block-based visual language.
In September of 2020 it was awarded second place in the startup category of the American Legal Technology Awards.</description></item><item><title>Encoding Legal Documents in Blawx</title><link>https://JasonMorrisSC.github.io/post/2022-01-23_legal_docs_in_blawx/</link><pubDate>Sun, 23 Jan 2022 11:26:10 -0700</pubDate><guid>https://JasonMorrisSC.github.io/post/2022-01-23_legal_docs_in_blawx/</guid><description>I&amp;rsquo;ve been spending some time recently working on adding a way to describe legal documents to the development version of Blawx.com.
Objectives Big picture, I want to have a data structure inside Blawx that is going to allow people to cite the authority for rules using a specific reference, as pictured here:
Importing The structure should allow the user to add to and modify information imported from a structured source, such as a LegalDocML file.</description></item><item><title>Debugging Tax Forms with Lean: Chris Bailey at ProLaLa 2022</title><link>https://JasonMorrisSC.github.io/post/debugging_tax_forms_with_formal_verification/</link><pubDate>Mon, 17 Jan 2022 13:24:31 -0700</pubDate><guid>https://JasonMorrisSC.github.io/post/debugging_tax_forms_with_formal_verification/</guid><description>Chris Bailey&amp;rsquo;s ProLaLa 2022 Presentation As I mentioned in the last blog post, Chris Bailey&amp;rsquo;s presentation at ProLaLa 2022 sort of requires its own blog post in response.
I didn&amp;rsquo;t take any screenshots of Chris&amp;rsquo; presentation, because he just shared his VS Code window. The sourcecode is available online. It might help to read this first, though.
Chris is a law student at the University of Illinois, and spoke about creating a library of encoded legal components that would be useable for formal verification-like tasks or software development tasks, both.</description></item><item><title>Notes from Prolala 2022</title><link>https://JasonMorrisSC.github.io/post/prolala/</link><pubDate>Mon, 17 Jan 2022 00:00:00 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/prolala/</guid><description>I had the opportunity to participate in Programming Languages and the Law (ProLaLa 2022), a workshop held as part of the Principles of Programming Languages 2022 conference (POPL 2022).
All of the day&amp;rsquo;s events are available to watch on YouTube.
It&amp;rsquo;s sort of hard to imagine an academic conference with a topic closer to my interests, and it did not disappoint. Here&amp;rsquo;s an extremely succinct version of what went down.</description></item><item><title>Avoiding the Clause Order Hassle in s(CASP)</title><link>https://JasonMorrisSC.github.io/post/2022-01-09_scasp_trick/</link><pubDate>Sun, 09 Jan 2022 21:50:38 -0700</pubDate><guid>https://JasonMorrisSC.github.io/post/2022-01-09_scasp_trick/</guid><description>The Clause Order Hassle Learning to use s(CASP) to encode legislation over the course of the last year or so has been at times frustrating. The reason for that is that I would often find myself with code that did not work as expected, and I could not understand why. Then, I would make changes, usually by changing the order of the lines of code, or by changing the number of predicates I was using, and the code would start to work.</description></item><item><title>Constraining Dates in s(CASP)</title><link>https://JasonMorrisSC.github.io/post/constraint_dates_scasp/</link><pubDate>Thu, 30 Dec 2021 00:00:00 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/constraint_dates_scasp/</guid><description>I&amp;rsquo;ve been playing around with an s(CASP) library for doing date math over the last little while, and finally found some time today to test it with s(CASP)&amp;rsquo;s ability to do constraints over reals. I was interested to see if there was a way that we could convert the dates into timestamps and then have s(CASP) treat them as a constraint.
The Problem Here&amp;rsquo;s my imaginary scenario. I am allowed to do something on any day that is in both the first and last 200 days of 2021.</description></item><item><title>New Year, New Blog (Again)</title><link>https://JasonMorrisSC.github.io/post/2021-12-29_new_year/</link><pubDate>Wed, 29 Dec 2021 00:00:00 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/2021-12-29_new_year/</guid><description>Here we go again! In what risks becoming an annual tradition, around here, I&amp;rsquo;ve decided to move the Rules as Code Diary away from Medium into a self-hosted blog built with hugo.
This is mainly motivated by the fact that a lot of what I&amp;rsquo;m writing these days is actually code, and Medium is pretty limited in terms of what it can do to display code typed into the editor. Hugo, on the other hand, will show you more or less whatever I can type into a markdown document, with syntax highlighting.</description></item><item><title>talk.RulesAsCode.com</title><link>https://JasonMorrisSC.github.io/project/talk.rulesascode.com/</link><pubDate>Thu, 23 Dec 2021 00:50:34 -0700</pubDate><guid>https://JasonMorrisSC.github.io/project/talk.rulesascode.com/</guid><description>talk.RulesAsCode.com is a discourse site that I set up with the help of Jameson Dempsey of Legal Hackers. It is a web forum, knowledge base, and mailing list for people working on digitized legislation, regulation, and contract, particularly people doing it in the public sphere.
When I learn about cool tools, I add to the knowledge base there.</description></item><item><title>Blawx</title><link>https://JasonMorrisSC.github.io/project/blawx/</link><pubDate>Wed, 22 Dec 2021 22:20:53 -0700</pubDate><guid>https://JasonMorrisSC.github.io/project/blawx/</guid><description>Blawx is my tool for demonstrating that it is possible to take declarative logic programming, which I believe to be the best way to encode legislation, regulation, and contract, and turn it into a user interface that is approachable for non-programmers.
It is a graphical development environment for the Flora-2 programming language, built in Google&amp;rsquo;s Blockly tool for graphical development environments. The source code is avaialable on GitHub, and a working demonstration is available online at www.</description></item><item><title>About Jason</title><link>https://JasonMorrisSC.github.io/about/</link><pubDate>Wed, 22 Dec 2021 22:09:32 -0700</pubDate><guid>https://JasonMorrisSC.github.io/about/</guid><description>I am a Canadian husband, dad, former lawyer, and computational law expert specializing in &amp;ldquo;Rules as Code.&amp;rdquo; I ran my own law firm &amp;ldquo;Round Table Law&amp;rdquo; for nearly a decade until 2020. In 2020 I obtained a Masters degree in Computational Law from the University of Alberta, and since mid-2020 have been working full time in the area of applying symbolic, rules-based artificial intelligence to the task of representing legal knowledge about statutes, regulations, contracts, and other formally-drafted written rules.</description></item><item><title>Rules as Code Diary 2020–2021 in Review</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-2020-2021-in-review-51b66f3253b4/</link><pubDate>Mon, 20 Dec 2021 21:56:29 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-2020-2021-in-review-51b66f3253b4/</guid><description>It’s traditional at the end of the year to look back and see where you started, and how far you have come. I’m going to extend the look back to 2020, because I started Computational Law Diary half way through 2020.
A Little Personal Background I started my full-time career in computational law about the same time that I started the Computational Law Diary in July of 2020. I spent one year with the Singapore Management University Centre for Computational Law, as the Principal Research Engineer in Symbolic Artificial Intelligence.</description></item><item><title>Explainable OpenFisca</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/explainable-openfisca-4c718d0fdc58/</link><pubDate>Thu, 16 Dec 2021 09:35:02 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/explainable-openfisca-4c718d0fdc58/</guid><description>Following up on the plan I wrote about a few days ago… By exposing all of the intermediate conclusions, and by adding separate variables that represent whether the primary variables are “known,” I’ve managed to create an encoding in OpenFisca that is capable of doing some cool stuff over the Web API.
You can see the source code in this GitHub repository, and the demos/explanations.py file demonstrates the use of the OpenFisca Web API with my rules as code encoding in Python.</description></item><item><title>Using OpenFisca as an Expert System Engine</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/using-openfisca-as-an-expert-system-engine-e291ddc50815/</link><pubDate>Wed, 08 Dec 2021 19:29:44 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/using-openfisca-as-an-expert-system-engine-e291ddc50815/</guid><description>At Service Canada we are working on a new tool to help Canadians to plan for retirement. And we are experimenting with implementing that system using a Rules as Code approach. Specifically, we are looking at implementing the rules in OpenFisca.
OpenFisca is a leading Rules as Code solution, but it is primarily aimed at microsimulation. Microsimulation is where you create a data model that represents small elements of a population, like people and households, and then encode the effects of different tax and benefit regimes.</description></item><item><title>“Rules as Code” Doesn’t Need Factions</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/rules-as-code-doesnt-need-factions-20424241c7a0/</link><pubDate>Tue, 07 Dec 2021 20:41:46 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/rules-as-code-doesnt-need-factions-20424241c7a0/</guid><description>Last December, Denis Merigoux and Liane Huttner presented a paper at the Algorithmic Law Symposium hosted at HEC Paris, on “Catala: Moving Towards the Future of Legal Expert Systems”. I’ve been meaning to take a look for some time, and finally managed it today.
[Edit: Denis Merigoux notes in the replies that the version of the paper I viewed was a pre-print before the authors had received the reviewer’s comments, which were only recently received, and some of which are echoed here.</description></item><item><title>Isolating the Legal Logic</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/isolating-the-legal-logic-dd3f2fa05b8/</link><pubDate>Wed, 01 Dec 2021 18:56:07 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/isolating-the-legal-logic-dd3f2fa05b8/</guid><description>Just had a great conversation with a colleague that helped me understand a challenges involved in implementing Rules as Code that hadn’t occured to me before.
The objective in Rules as Code is to write an encoding of the legislation that is as re-usable as possible. That means avoiding the temptation to put things into the encoding of the rules that only make sense to include in the context of a particular application.</description></item><item><title>OpenFisca in Google Colab</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/openfisca-in-google-colab-de92e2621d88/</link><pubDate>Tue, 30 Nov 2021 17:43:04 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/openfisca-in-google-colab-de92e2621d88/</guid><description>I blogged recently about the opportunity to use s(CASP) inside SWISH, the web-based development environment for SWI-Prolog.
Today it is another web-based development environment for Rules as Code, OpenFisca inside Google Colab.
What is OpenFisca? OpenFisca is probably the world’s most popular open source tool for Rules as Code. It is used extensively in France, and is spreading around the world.
What is Google Colab(oratory)? Google Colab is a web-based implementation of Jupyter notebooks-a “literate programming” tool for the Python programming language-and Google’s cloud services.</description></item><item><title>talk.RulesAsCode.com-A Community Forum</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/talk-rulesascode-com-a-community-forum-a16fe2140a51/</link><pubDate>Fri, 19 Nov 2021 17:49:48 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/talk-rulesascode-com-a-community-forum-a16fe2140a51/</guid><description>Rules as Code is a movement in public administration that suggests that the digitization of legislation, regulation, and other rules should happen as early in their life cycle as possible, so as to improve policy design, improve legislative drafting, and massively simplify service automation and building software systems compliant with those rules.
It is an international movement, and it is an interdisciplinary movement. It impacts on people inside government, legislatures, regulatory bodies, regulated entities, academia, as well as technologists, lawyers, and more.</description></item><item><title>Scoping for Defeasibility in Flora-2</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/scoping-for-defeasibility-in-flora-2-36b046e30463/</link><pubDate>Thu, 18 Nov 2021 22:15:42 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/scoping-for-defeasibility-in-flora-2-36b046e30463/</guid><description>In yesterday’s post, I talked a little about how it would be nice if there was a way to use legislative scope to refer to sections of law, particularly to implement, in a structurally-isomorphic way, defeasibility statements like “subject to this act and the regulations.”
Today I’m going to share a small experiment I did in Flora-2 to see if I can demonstrate a working approach. I’d be interested in your thoughts.</description></item><item><title>What One Section of Law Tells us about what Rules as Code Needs</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/what-one-section-of-law-tells-us-about-what-rules-as-code-needs-a69a77784311/</link><pubDate>Wed, 17 Nov 2021 20:38:33 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/what-one-section-of-law-tells-us-about-what-rules-as-code-needs-a69a77784311/</guid><description>I’m currently working within Service Canada’s Benefits Delivery Modernization Program, and I’m working with a team that is looking to automate calculations under the Old Age Security Act.
I have been looking at various approaches for encoding the relevant sections of the Act, and over the last couple of days I’ve been struck by what a good example section 3(1) of the OAS Act is of the kinds of features that we need in Rules as Code technologies.</description></item><item><title>s(CASP) + SWI-Prolog = 🔥</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/s-casp-swi-prolog-ccf8e53c951a/</link><pubDate>Mon, 01 Nov 2021 23:45:59 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/s-casp-swi-prolog-ccf8e53c951a/</guid><description>It was back in December of 2020 that I first learned about a tool called s(CASP). Since then I have written about using s(CASP) to encode Covid-19 rules using basic event calculus, I wrote about how it is my new favourite tool for Rules as Code, I’ve written about what it is, and why that matters for Rules as Code, about how you can use it to make laws better, and I introduced a new tool for user-facing legal expert systems powered by s(CASP) encodings of rules, and published an extended abstract in the ICAIL ’21 proceedings based on an encoding done in s(CASP).</description></item><item><title>ICAIL 2021: Part 2</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/icail-2021-part-2-bdd268deaf33/</link><pubDate>Tue, 22 Jun 2021 21:19:18 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/icail-2021-part-2-bdd268deaf33/</guid><description>Perhaps the most interesting part of the first day of ICAIL 2021 proper is a presentation by Dr. Alice Witt, entitled Converting Copyright Legislation into Machine-Executable Code: Interpretation, Coding Validation and Legal Alignment. The presentation is available on YouTube here.
Let me first say that this is the first time that I have seen a paper on Rules as Code at ICAIL, and it is nice to see it getting the attention that it deserves in that forum.</description></item><item><title>ICAIL 2021: Part 1</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/icail-2021-part-1-39417f6ed172/</link><pubDate>Tue, 22 Jun 2021 16:46:16 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/icail-2021-part-1-39417f6ed172/</guid><description>ICAIL is the International Conference on Artificial Intelligence and Law. It is held bi-annually, and it is currently being “hosted” virtually in Sao Paulo, Brazil.
You can “attend” it virtually by going to the Associação Lawgorithm youtube channel and following along with the live presentations today, tomorrow, and Thursday.
On the Monday and Friday of the conference there are typically a number of parallel workshops. Yesterday I followed along with the Explainable and Responsible AI in Law workshop, which was very interesting.</description></item><item><title>“Rules as Code” Extended Abstract to appear in ICAIL ’21 Proceedings</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/rules-as-code-extended-abstract-to-appear-in-icail-21-proceedings-7fc5dedbf8b8/</link><pubDate>Fri, 28 May 2021 02:12:24 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/rules-as-code-extended-abstract-to-appear-in-icail-21-proceedings-7fc5dedbf8b8/</guid><description>The International Conference on Artificial Intelligence and Law is a renowned international academic conference on law and artificial intelligence. It is held every two years.
In 2019, I had the pleasure of attending in order to present a demonstration of work that was part of my LLM in Computational Law at the University of Alberta.
I’m happy to share that I will be “attending” again this year. ICAIL ’21 will be publishing an extended abstract of mine, which is one level above a demonstration.</description></item><item><title>Need Legal Tech? Hire an Architect.</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/need-legal-tech-hire-an-architect-1a031673654a/</link><pubDate>Mon, 24 May 2021 11:39:29 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/need-legal-tech-hire-an-architect-1a031673654a/</guid><description>Today at SMU CCLaw we had a seminar from Dr. Joaquín Arias Herrero of the Universidad Rey Juan Carlos in Spain. Dr. Arias is one of the researchers responsible for s(CASP), which is my new favourite programming language for Rules as Code.
I was delighted to learn about the existence of s(CASP) late last year. I have been spending a lot of time working in it in the first half of 2021, and that delight has not diminished.</description></item><item><title>How Rules as Code Makes Laws Better</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/how-rules-as-code-makes-laws-better-115ab62ab6c4/</link><pubDate>Sat, 15 May 2021 15:15:51 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/how-rules-as-code-makes-laws-better-115ab62ab6c4/</guid><description>I want to give you an intuition for why Rules as Code in logical tools like s(CASP) makes laws better.
Let’s imagine that you are the legal knowledge engineer assigned to the Rules as Code process for drafting the Rock Paper Scissors Act of 2021. The purpose of the Rock Paper Scissors Act is to set out the official rules of who is the winner of a game of Rock Paper Scissors.</description></item><item><title>Inaugural International Law Lab Showcase Tomorrow!</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/inaugural-international-law-lab-showcase-tomorrow-697c3bc93ed3/</link><pubDate>Tue, 11 May 2021 10:34:32 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/inaugural-international-law-lab-showcase-tomorrow-697c3bc93ed3/</guid><description>The International Law Lab Showcase is an online meetup of innovation and technology labs at law schools around the world. It is an opportunity for the members of these labs to meet one another, and for people interested in how these innovative institutions operate to come ask questions.
If you are interested in attending a law school with an innovation and technology lab, or if you are a law school interested in starting one, this is where you should be.</description></item><item><title>Open Source Legal Expert Systems Video (3m)</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/open-source-legal-expert-systems-video-3m-b57bcde7f490/</link><pubDate>Tue, 11 May 2021 06:44:40 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/open-source-legal-expert-systems-video-3m-b57bcde7f490/</guid><description/></item><item><title>Introducing L4-Docassemble</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/introducing-l4-docassemble-69ce4b1fb1e7/</link><pubDate>Wed, 05 May 2021 08:25:25 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/introducing-l4-docassemble-69ce4b1fb1e7/</guid><description>At SMU’s Centre for Computational Law we are working on an open source domain specific language for law, called L4. The idea is that you should be able to write legal rules, like laws or contracts, in L4, and other applications should be able to translate that encoding into other forms to do useful things.
One of the useful things that we want people to be able to do with L4 is to build expert systems.</description></item><item><title>Legal Drafting to Avoid Computational Complexity</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/legal-drafting-to-avoid-computational-complexity-115a55818493/</link><pubDate>Wed, 24 Mar 2021 07:11:46 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/legal-drafting-to-avoid-computational-complexity-115a55818493/</guid><description>I was working on an s(CASP) encoding last week, and learned something that gave me a better intuition for how to encode things well.
I needed to encode what counted as a business, and there were two things. I needed to encode what counted as a business entity, and there were 7 things, each of which required a business, which meant there were 14 possibilities total. Then I needed to encode what counted as an executive appointment, and there were three.</description></item><item><title>Modelling the World, the Law, and the Question</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/modelling-the-world-the-law-and-the-question-e24ea763120e/</link><pubDate>Sat, 06 Mar 2021 07:12:49 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/modelling-the-world-the-law-and-the-question-e24ea763120e/</guid><description>I’ve been spending a lot of time recently thinking about the problem of choosing how to model things when doing automated legal reasoning.
What is a Model? Just so we’re on the same page, when I talk about a model, there is a real thing, of some sort, and there is a representation of that thing in a language which is useful for some reason. The representation is the model, and the language is the modelling language.</description></item><item><title>… and why it matters for Rules as Code</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/and-why-it-matters-for-rules-as-code-8610e49511c8/</link><pubDate>Fri, 19 Feb 2021 06:35:28 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/and-why-it-matters-for-rules-as-code-8610e49511c8/</guid><description>Yesterday I posted about what justified stable model query-driven constraint answer set programming is. Now let me tell you a little bit about why I think all of that matters.
Defeasibility The higher-order logic features of s(CASP) make it very easy to implement forms of defeasibility the way it is implemented in legal writing, which is that the relationship is noted only in the default, or in the exception, but not in both.</description></item><item><title>What is Justified Stable Model Constraint Query-Driven Answer Set Programming?</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/what-is-justified-stable-model-constraint-query-driven-answer-set-programming-c895955bf68c/</link><pubDate>Thu, 18 Feb 2021 09:27:29 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/what-is-justified-stable-model-constraint-query-driven-answer-set-programming-c895955bf68c/</guid><description>I spent some time today trying to understand where s(CASP) fits into the world of programming languages more generally, and here’s what I think is going on.
Remember, I’m not an expert. This is my amateur understanding after playing with it for a few days.
What is the “Usual” type of programming language? The usual paradigm for programming languages is called imperative programming, in which you basically tell the computer what to do, and in what order.</description></item><item><title>s(CASP) as a Rules as Code Tool</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/s-casp-as-a-rules-as-code-tool-97ec3435975c/</link><pubDate>Tue, 16 Feb 2021 13:52:33 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/s-casp-as-a-rules-as-code-tool-97ec3435975c/</guid><description>OK, I think I’m going to call it. Flora-2 is no longer my favourite tool for doing Rules as Code. My new favourite is s(CASP).
I’m working on a paper for the International Conference on Artificial Intelligence and Law at work, and I’m doing an experiment, the results of which are blowing me away.
I took a piece of legislation recommended by a potential industry partner, and encoded it in s(CASP).</description></item><item><title>How Argumentation Theory Can Be Used in Automating Reasoning about Conflicts of Law</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/how-argumentation-theory-can-be-used-in-automating-reasoning-about-conflicts-of-law-5f9ce836a1b/</link><pubDate>Tue, 09 Feb 2021 12:09:52 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/how-argumentation-theory-can-be-used-in-automating-reasoning-about-conflicts-of-law-5f9ce836a1b/</guid><description>Flora-2 is a logic programming language that implements defeasible reasoning using a method called “defaults and argumentation theories.”
Here’s how it works.
Choose An Argumentation Theory The first thing you have to do is choose the argumentation theory that you want, but Flora-2 has a very intuitive default.
:- use_argumentation_theory. Tag Your Rules Flora-2 gives you the option of specifying that some rules override others either by identifying the rules, or by identifying the conclusions.</description></item><item><title>Are Smart Contracts Legal?</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/are-smart-contracts-legal-263c6d118d7/</link><pubDate>Tue, 02 Feb 2021 02:21:44 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/are-smart-contracts-legal-263c6d118d7/</guid><description>I was pointed by a colleague to a paper on SSRN by two law professors proposing a method for making smart contracts “legal.”
What they mean, I take it, is that they want to make sure that smart contracts are enforceable in court the way “normal” contracts are. And the method they propose is a combination of natural language and code.
This is similar to the way clause.io uses blocks of natural language text combined with parallel blocks of code to allow you to generate smart contracts.</description></item><item><title>Blawx Dev Notes</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/blawx-dev-notes-ca2bdf03cf3b/</link><pubDate>Sun, 17 Jan 2021 16:37:02 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/blawx-dev-notes-ca2bdf03cf3b/</guid><description>I took the opportunity over the last couple of days to spend some time working on long-planned upgrades to Blawx. It has been partly successful, and partly an exercise in frustration.
The frustration comes from the fact that I’m working with limited processing power here in my hotel room in Singapore, having only brought a Surface Go tablet with me for writing code. To get any further, I think I’m going to have to bite the bullet and pay for a development server.</description></item><item><title>World Logic Day 2021 (Bob knows my name!)</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/world-logic-day-2021-bob-knows-my-name-844e99013548/</link><pubDate>Fri, 15 Jan 2021 11:31:34 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/world-logic-day-2021-bob-knows-my-name-844e99013548/</guid><description>January 14, 2021 was “World Logic Day”, and in celebration of it the Department of Computing Science at the University of Texas Dallas invited Robert Kowalski to give a speech on Logical English.
If you don’t know who Dr. Robert Kowalski is, he more or less invented logic programming in the 1970s. In the logic programming community, he is a “big deal.” He is also the first person I’m aware of to have used logic programming languages as a knowledge representation tool for legislation.</description></item><item><title>New Year, New Look, New Flora-2</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/new-year-new-look-new-flora-2-c06ef3ad16a6/</link><pubDate>Sun, 10 Jan 2021 13:45:57 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/new-year-new-look-new-flora-2-c06ef3ad16a6/</guid><description>I thought that given it is a new year, it was time to refresh the way the Diary looks. So the Diary has become a publication on Medium, which you can follow without needing to follow me personally, and to which I can add other members of the SMU Centre for Computational Law team.
I would love it if you would share the link to the diary with your friends networks interested in Rules as Code, Smart Contracts, Legal Tech, and Computational Law.</description></item><item><title>Explainable Event Calculus in Carneades</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-explainable-event-calculus-in-carneades-55ec44a7db53/</link><pubDate>Thu, 31 Dec 2020 01:02:51 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-explainable-event-calculus-in-carneades-55ec44a7db53/</guid><description>If you’ve been following along for the last few weeks, you know that I’ve been playing with different methods of representing event calculus, and aiming at being able to explain the outcomes.
This week I’d like to show you an experiment I did with a tool called Carneades. Carneades is named for the ancient Greek philosopher who was famous for having travelled to Rome and given two lectures in two days.</description></item><item><title>Encoding Covid-19 rules using Basic Event Calculus in s(CASP)</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-encoding-covid-19-rules-using-basic-event-calculus-in-s-casp-32a55b789eeb/</link><pubDate>Wed, 23 Dec 2020 23:32:33 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-encoding-covid-19-rules-using-basic-event-calculus-in-s-casp-32a55b789eeb/</guid><description>Alright, fellow legal nerds, let’s get deep in the weeds, here.
What is Event Calculus? A “calculus” is a way of reasoning about something. Event Calculus is a way of reasoning about events, and their consequences. I use consequences here to mean “what happens after those events have occured, and because those events have occurred.” So it is a calculus of causes, and a calculus of time.
What is Discrete Event Calculus?</description></item><item><title>Explainable Legal AI in s(CASP)</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-explainable-legal-ai-in-s-casp-19da0a5d956/</link><pubDate>Tue, 15 Dec 2020 23:42:31 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-explainable-legal-ai-in-s-casp-19da0a5d956/</guid><description>So yesterday, I learned about something called s(CASP) that I needed to try.
Today I tried it. And it’s awesome. Here’s how it went.
Background I actually came across s(CASP) by accident while looking for something else. The name, I take it, means stable model constraint answer set programming. Which is the sort of name only a computer scientist could love. It was created by a team at the Joaquin Arias, Zhuo Chen, Manuel Carro, and Gopal Gupta at the IMDEA Software Institute at Universidad Politecnica de Madrid.</description></item><item><title>Untying Complicated “Not”s, a Wrap on Coding the Law 2020, and Singapore…</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-untying-complicated-not-s-a-wrap-on-coding-the-law-2020-and-singapore-bc75cf89015c/</link><pubDate>Mon, 07 Dec 2020 19:06:33 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-untying-complicated-not-s-a-wrap-on-coding-the-law-2020-and-singapore-bc75cf89015c/</guid><description>I’m working on some materials to help bring our junior researchers up to speed on Flora-2, and I noticed something interesting when trying to explain how Flora-2 does negation differently than other logic programming languages.
Three Nots In Flora-2 there are three different ways of saying “not”, and they all mean different things.
Classical Negation Classical negation comes from formal logic, and is expressed using the operator \neg. If you say \neg raining, what you are saying is that the truth-value of the statement raining is known to be false.</description></item><item><title>Jason’s Timepoint Algebra</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-jasons-timepoint-algebra-d8bc215db2ce/</link><pubDate>Tue, 01 Dec 2020 00:26:14 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-jasons-timepoint-algebra-d8bc215db2ce/</guid><description>If you’ve been following along over the last few weeks, you will know that I’ve been working on writing some code to do reasoning about time.
I’ve been working on Allen Interval Algebra, but in order to use Allen Interval Algebra you need to model your problem as a set of intervals. That is to say, you need to model the things that happen as happening over a period of time, as opposed to at a specific time.</description></item><item><title>Progress on Allen Interval Algebra</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-progress-on-allen-interval-algebra-e283a2ddf005/</link><pubDate>Thu, 19 Nov 2020 17:11:28 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-progress-on-allen-interval-algebra-e283a2ddf005/</guid><description>This has been a very busy week, with 3 guest lectures at Sciences Po, and a Rules as Code presentation for the OECD’s Governing After Shock web conference, plus a prep meeting for the Canada School of Public Service Open Government conference next week, which I understand is expecting more than 3000 attendees. If you’d like to register, follow the link.
But I have a little progress to report on the Allen Interval Algebra library I was telling you about last week.</description></item><item><title>Getting Smarter about Time</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-getting-smarter-about-time-7a72f5275ca7/</link><pubDate>Fri, 13 Nov 2020 06:28:52 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-getting-smarter-about-time-7a72f5275ca7/</guid><description>Let’s say I’m building a web app that tells you whether or not you are allowed to drive based on whether or not you have a license. Easy. You check a box that says you have a license, and I say “yes” or “no” based on whether or not you have the license.
But you don’t always want to know about right now. Maybe you got a ticket last week, and you want to know if you were legal to drive then.</description></item><item><title>More Explanations, Encoding SAFE again, and Twitch</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-more-explanations-encoding-safe-again-and-twitch-9f60d20d0a99/</link><pubDate>Thu, 05 Nov 2020 19:01:46 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-more-explanations-encoding-safe-again-and-twitch-9f60d20d0a99/</guid><description>If you read my last blog post about generating explanations for Flora-2 statements, you may recall that the explanation was full of a lot of symbols that were difficult to read. That problem has been greatly improved, so the explanation for “is Pugsley a sibling of Wednesday” looks like this:
Goal: Wednesday has a sibling, Pugsley is satisfied. We know this because there is a rule: two people are siblings if all of the parents of the first person are also parents of the second person Subgoal: (Wednesday is a Person and (Pugsley is a Person and (it is not true that ((an object A has a child, Wednesday and an object A is a Person) and (it is not true that an object A has a child, Pugsley))))) is not satisfied.</description></item><item><title>Progress on Explanations</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-progress-on-explanations-2ad8e37e30ad/</link><pubDate>Tue, 27 Oct 2020 22:28:18 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-progress-on-explanations-2ad8e37e30ad/</guid><description>So this week I have been working on automatically generating explanations for answers generated from Ergo Lite queries. I decided on a working title for the explanation module of “xf2”, for “eXplainable Flora-2.”
My working repo is here, if you’re interested in looking at the code.
So far, what we’ve got is explanations generated in a tree structure, using rule descriptions provided by the user, for variable-free queries that were answered using rules, conjunction (and), disjunction (or), negation (not), and user-specified facts.</description></item><item><title>Adding Explanations to Blawx</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-adding-explanations-to-blawx-bdbd3e27e366/</link><pubDate>Fri, 23 Oct 2020 21:22:04 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-adding-explanations-to-blawx-bdbd3e27e366/</guid><description>Blawx is my web-based tool for Rules as Code. It is a graphical development environment that allows you to easily learn to encode legal knowledge, describe fact scenarios, and ask questions and get answers.
One of the features that is missing from Blawx is explanations for those answers. Explanations are a very important part of Rules as Code for two reasons. First, they provide the user with context and reasons for the results that your tool provides, which goes to the accountability and transparency of your tool, and increases its trustworthiness.</description></item><item><title>Progress on DADataType</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-progress-on-dadatatype-eca81d856595/</link><pubDate>Tue, 20 Oct 2020 21:30:21 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-progress-on-dadatatype-eca81d856595/</guid><description>This week we made some progress bringing features of top-of-the-class logic programming tools to open source.
If you are using a tool like Oracle Intelligent Advisor, or Neota Logic, for example, you can follow these steps:
Describe the domain.
For example, you might explain to the tool that a game has two players and a winner, players throw a sign, the signs are Rock, Paper, and Scissors. Encode the rules.</description></item><item><title>SAFE in Drools</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-safe-in-drools-f665ecc605e3/</link><pubDate>Thu, 08 Oct 2020 19:26:58 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-safe-in-drools-f665ecc605e3/</guid><description>This week I had the opportunity to spend more time playing with Drools, and I now have something that actually works. It’s not perfect, but it does generate correct answers. Let me give you a tour.
What’s SAFE? “SAFE” is Y-Combinator’s Simple Agreement for Future Equity. It is a contract that is designed to allow an investor to buy part of your startup company, right away, without you needing to go through the hassle of issuing non-voting shares, waiting for other investors to be ready to pay, etc.</description></item><item><title>Drooling over Rules as Code</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-drooling-over-rules-as-code-52aa0470b792/</link><pubDate>Fri, 02 Oct 2020 23:05:07 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-drooling-over-rules-as-code-52aa0470b792/</guid><description>Video of Legislative Drafting Conference Presentation I did an introduction to Rules as Code and demonstration of Blawx for the Canadian Institute for the Administration of Justice’s 2020 Legislative Drafters Conference. As promised, the video is now available on YouTube. If you hae 20 minutes, check it out at https://youtu.be/bzBouePm5Js, or watch it here:
Learning Drools I’ve been spending a lot of time over the last couple of weeks trying to get my fingers dirty with Drools, which is an open source BRMS tool for Java.</description></item><item><title>Fighting the Naive Analogy</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-fighting-the-naive-analogy-bb46d7ce3536/</link><pubDate>Tue, 22 Sep 2020 18:06:50 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-fighting-the-naive-analogy-bb46d7ce3536/</guid><description>Electronic Files and the Naive Analogy When I started running a virtual law firm, I went to a lot of trouble to make sure that all of the pieces of information about one of my clients’ matters were all in the same place. Emails were converted to PDF, and stored in some single source of truth location, like an electronic version of a case file.
That was a giant waste of time.</description></item><item><title>Blawx Runner Up at ATLA, and Visual Interfaces Rock</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-blawx-runner-up-at-atla-and-visual-interfaces-rock-904809dfbd26/</link><pubDate>Tue, 15 Sep 2020 19:30:26 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-blawx-runner-up-at-atla-and-visual-interfaces-rock-904809dfbd26/</guid><description>Blawx Named Runner Up at ATLA Much to my surprise, Blawx, the open source web based tool for Rules as Code that I have been working on for almost two years, was named a finalist for the Startup Category of the inaugural American Legal Technology Awards.
To my even greater surprise, yesterday Blawx was named as the runner up in that category. Congratulations to the winner LegalMation. And thanks again to the judges involved.</description></item><item><title>Dirty Air</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-dirty-air-6e2bb71d6009/</link><pubDate>Wed, 09 Sep 2020 18:01:01 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-dirty-air-6e2bb71d6009/</guid><description>I’m a NASCAR fan. A lot of people look at NASCAR races and wonder why in the world anyone would want to watch it, except for crashes. It just looks like a lot of “go fast, turn left.” The people in front are the people with the fastest cars. What more could there be to it?
Well, a few things.
Air In normal experience, you drive on a road.
In NASCAR, you are driving on two surfaces.</description></item><item><title>Encoding “For Greater Clarity” Provisions</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-encoding-for-greater-clarity-provisions-698a83f4612c/</link><pubDate>Fri, 04 Sep 2020 18:41:01 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-encoding-for-greater-clarity-provisions-698a83f4612c/</guid><description>Today has been a very interesting day in Alberta. News broke that the rules for dealing with Covid-19 had changed last Saturday, just before the start of school this week. The new order reads, in part, as follows:
“… an operator of a school does not need to ensure that students, staff members, and visitors are able to maintain a minimum of 2 metres distance from every other person when a student, staff member or visitor is seated at a desk or table.</description></item><item><title>Lollies, Decision Tables, and What “Hamilton” Teaches Us About…</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-lollies-decision-tables-and-what-hamilton-teaches-us-about-a50976dbd8be/</link><pubDate>Thu, 27 Aug 2020 22:25:24 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-lollies-decision-tables-and-what-hamilton-teaches-us-about-a50976dbd8be/</guid><description>Search Space Episode 3 This past weekend I was listening to an episode of the Search Space, a wonderful podcast for just my particular breed of nerd, and Professor Chris Martens was talking about their language Ceptre, which is used for programming interactive worlds.
I’m now excited to learn more about linear logic and the “lolly” connective A -o B which in Ceptre can be used to say “if A is true, then there can be a transition in state where A is no longer true and B becomes true.</description></item><item><title>Responding to Ma’s “Writing in Sign”</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-responding-to-mas-writing-in-sign-7f6972cd977c/</link><pubDate>Fri, 21 Aug 2020 18:06:09 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-responding-to-mas-writing-in-sign-7f6972cd977c/</guid><description>Last week a paper I wrote for the MIT Computational Law Report about using Blawx for Rules as Code was published. Please, please check it out and let me know what you think. Your feedback would be extremely valuable.
I had been hoping that the piece would start a conversation, but little did I know there was another paper published in the same release that was also talking about Blawx. The conversation had started already!</description></item><item><title>The Value of Rules as Code Without Computers</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-the-value-of-rules-as-code-without-computers-2a59c0766310/</link><pubDate>Fri, 14 Aug 2020 16:36:05 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-the-value-of-rules-as-code-without-computers-2a59c0766310/</guid><description>I’ve been preparing a presentation for the Canadian Institute for the Administration of Justice’s Legislative Drafting Conference on Rules as Code. In the process of trying to figure out how to introduce the topic of Rules as Code to legislative drafters, I’ve been thinking about the different meanings the term “Rules as Code” has been given.
Some people use “Rules as Code” to refer to the larger public service delivery methodology, which includes a method of legislative drafting, where you write the legislation in natural languages and computer languages at the same time.</description></item><item><title>Who’s to Blame?</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-whos-to-blame-22b025b56c57/</link><pubDate>Wed, 05 Aug 2020 18:50:27 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-whos-to-blame-22b025b56c57/</guid><description>I’m re-reading a 2011 dissertation by Tom Hvitved entitled “Contract Formalization and Modular Implementation of Domain-Specific Languages”.
Hvitved proposes a set of requirements for contract formalisms. Basically, it’s a list of capabilities a “way of describing a contract to a computer” should enable. Among his proposed requirements is a record of who is to blame if something goes wrong. As he writes:
In the case where a contract is breached, the monitor should not only report a breach of contract, but also who among the contract participants is responsible.</description></item><item><title>Monads, mo’ problems.</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-monads-mo-problems-7978f952b2fb/</link><pubDate>Thu, 30 Jul 2020 05:37:02 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-monads-mo-problems-7978f952b2fb/</guid><description>This week at work I got a wonderful lesson on Monads, which are a technique in functional programming. But what it taught me, more than what Monads are and why I should care, is how bad most people are at explaining computing science concepts. And how they could take a lesson from infomercials.
Monad Nomad I’ve watched multiple videos online, and read multiple chapters of tutorials trying to explain them, and come away baffled each time.</description></item><item><title>What does GPT-3 Mean for Rules as Code?</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-what-does-gpt-3-mean-for-rules-as-code-d2f01caa6857/</link><pubDate>Fri, 17 Jul 2020 21:49:15 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/computational-law-diary-what-does-gpt-3-mean-for-rules-as-code-d2f01caa6857/</guid><description>GPT-3 is a newly announced AI model produced by OpenAI, that is showing some remarkable capabilities. I’m going to give you a quick background into what it is, what it can do, and what that might mean for Rules as Code.
What is GPT-3? GPT-3, simplified, is a piece of software that can predict what the next word will be in a string of text. It can do that over and over, to the point where it can effectively write text that is almost indistinguishable from human writing.</description></item><item><title>10 Questions and Answers about Rules as Code</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/10-questions-and-answers-about-rules-as-code-a26ecc091828/</link><pubDate>Tue, 26 May 2020 07:20:51 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/10-questions-and-answers-about-rules-as-code-a26ecc091828/</guid><description>[Edit: A previous version of this post incorrectly identified Brainbox.Institute as the people doing the research project described below. In fact, only two of the three researchers are associated with Brainbox. Apologies.]
Tom Barraclough, in a recent Medium post, put forward a test case that a team of independent researchers funded by the New Zealand Law Foundation had been working on and asked for feedback. This post is my attempt to contribute to that conversation.</description></item><item><title>Playing Along with Rules As Code: Part 6</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/playing-along-with-rules-as-code-part-6-5a30121a2a84/</link><pubDate>Thu, 05 Mar 2020 22:36:44 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/playing-along-with-rules-as-code-part-6-5a30121a2a84/</guid><description>So in the last post we got to the point where our model of the law understands what it needs to understand in order to be able to generate “Year of Employment” objects. In this post, we’re going to finish our rules, we’re going to generate an interview, and use it to debug problems in the law.
Fudging It (a little) I spent some time trying to get OPM to play nice, but ran into a number of brick walls.</description></item><item><title>Playing Along with Rules as Code: Part 5</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/playing-along-with-rules-as-code-part-5-8195334dcb35/</link><pubDate>Mon, 02 Mar 2020 20:49:50 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/playing-along-with-rules-as-code-part-5-8195334dcb35/</guid><description>Continuing our work encoding section 183 of the Act in Oracle Policy Modelling. Oh, man. Ok, let’s get into this.
This is the fifth in a series of posts following along with the Government of Canada’s Rules as Code project. Check out the earlier posts for context.
The Next Part of the Problem Let’s start with a reprint of the section we’re encoding, section 183’s definition of “year of employment.”</description></item><item><title>Playing Along with Rules As Code: Part 4</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/playing-along-with-rules-as-code-part-4-b715c1a924a9/</link><pubDate>Fri, 28 Feb 2020 17:23:26 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/playing-along-with-rules-as-code-part-4-b715c1a924a9/</guid><description>So today we’re going to get started encoding section 183’s definition of “year of employment.”
This is the fourth in a series of blog posts about following along with the Government of Canada’s Rules as Code discovery project. For details on the project itself, check out Scott McNaughton’s medium page.
Here’s the definition from the source Act:
183 In this Division,
…
year of employment means continuous employment of an employee by one employer</description></item><item><title>Playing along with Rules as Code Part 3</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/playing-along-with-rules-as-code-part-3-52d6286f8245/</link><pubDate>Thu, 27 Feb 2020 01:33:42 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/playing-along-with-rules-as-code-part-3-52d6286f8245/</guid><description>This is the third in a series of posts were I follow along with the Government of Canada’s Rules as Code discovery project. In this post, I’m going to start modelling the legislation in Oracle Intelligent Advisor.
Check out the first post for an explanation of the source material, and the second post for an explanation of why we’re starting again in OIA after having begun in Flora-2.
Ontology Take 2 The ontology we are going to build here is going to be smaller than the one we started with, because we are only aiming at being able to answer questions about vacation pay.</description></item><item><title>Playing Along With Rules as Code Part 2</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/playing-along-with-rules-as-code-part-2-4acc82c53f95/</link><pubDate>Mon, 24 Feb 2020 21:21:02 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/playing-along-with-rules-as-code-part-2-4acc82c53f95/</guid><description>Scott McNaughton’s latest blog post about the Government of Canada’s Rules as Code project indicates that they have decided to change the scope of the project a little bit.
The first thing is that they have decided they are worried primarily about being able to answer questions about how much vacation pay is due, and not questions about entitlement to vacation periods.
The second thing he mentions is that they want to be able to take into account what is called “protected leave.</description></item><item><title>Playing Along with Rules as Code</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/playing-along-with-rules-as-code-6c837b42a33e/</link><pubDate>Tue, 18 Feb 2020 21:49:50 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/playing-along-with-rules-as-code-6c837b42a33e/</guid><description>The Government of Canada, much to my delight, is currently working on their first-ever Rules as Code discovery project. I’ve decided to play along in the hopes that it will both me and their discovery project team the opportunity to compare notes.
I’m going to chronicle the journey here for people who are interested in seeing it play out in real time.
This series of posts is going to include a lot of code, written in the Flora-2 (aka ErgoLite) programming language.</description></item><item><title>Is Rules as Code easier to implement in Canada than in the US?</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/is-rules-as-code-easier-to-implement-in-canada-than-in-the-us-c951361143d0/</link><pubDate>Mon, 09 Dec 2019 19:49:59 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/is-rules-as-code-easier-to-implement-in-canada-than-in-the-us-c951361143d0/</guid><description>This is an idea that has come up in a few conversations over the last few weeks.
Legislative drafting in parliamentary democracies works differently than it does in the United States, for example. In a parliamentary democracy, the government, in the “executive branch” sense, remains the government because they have the “confidence” of the legislature, which is the legislative branch. “Confidence,” simplified, means that when the government puts forward something it wants to enact as a law, the legislature adopts it.</description></item><item><title>Demo of Blawx Integration with Docassemble over API for Rules as Code</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/demo-of-blawx-integration-with-docassemble-over-api-for-rules-as-code-1c631a3c24fc/</link><pubDate>Thu, 10 Oct 2019 05:07:19 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/demo-of-blawx-integration-with-docassemble-over-api-for-rules-as-code-1c631a3c24fc/</guid><description>Blawx is a tool for allowing people to easily encode written legal rules, and power other applications over the web with those encodings.
We have now built our first proof-of-concept web integration, with docassemble, demonstrating how rules you build in Blawx can be used to give legal reasoning capabilities to any other tool on the web.
The Rules: Rock Paper Scissors The first step is to encode the rules that you need.</description></item><item><title>The Better Way To #RulesAsCode, in Two Drawings</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/the-better-way-to-rulesascode-in-two-drawings-be4aee003f78/</link><pubDate>Wed, 09 Oct 2019 16:24:36 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/the-better-way-to-rulesascode-in-two-drawings-be4aee003f78/</guid><description>Here’s how we generally build tools that automate legal reasoning now:
So we have some rules, and we have a question we would like to answer. A programmer comes up with a procedure for answering that question given the rules, and encodes that procedure in an algorithm. The algorithm and the data (collected from the user somehow) are given to the computer, and the computer follows the steps in the algorithm and spits out an answer.</description></item><item><title>Another Rules as Code example from ICAIL 2019</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/another-rules-as-code-example-from-icail-2019-1a73059f7e4/</link><pubDate>Fri, 21 Jun 2019 15:46:17 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/another-rules-as-code-example-from-icail-2019-1a73059f7e4/</guid><description>A short while ago I wrote a post about how you can use AustLII’s DataLex to take legislation and turn it into code.
This week I’m attending the International Conference on Artificial Intelligence and Law (ICAIL 2019) at the University of Montreal Cyberjustice Lab. As I type, I’m in a tutorial session discussing a new open-source tool for Rules as Code, called NAI.
Encoding The Law I decided to re-implement the same code from the previous post in order to see the differences.</description></item><item><title>“Rules as Code” Can and Should Be Done Without Programmers</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/rules-as-code-can-and-should-be-done-without-programmers-fb3e0f4dafa5/</link><pubDate>Wed, 05 Jun 2019 19:04:02 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/rules-as-code-can-and-should-be-done-without-programmers-fb3e0f4dafa5/</guid><description>I’ve been having conversations with people on twitter recently about my aspirational view that encoding laws will not always require programmers to be involved.
I am both a lawyer and a programmer, so it’s easy for me to be wrong about that sort of thing. So I’d like to share an example of why I think it’s possible, and you can decide for yourself.
The basic idea of Rules as Code is we take rules, we encode them, and that allows us and others to build more and better helpful applications.</description></item><item><title>Live Demo: Integrating Docassemble and Ergo Lite for Logic Coding</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/live-demo-integrating-docassemble-and-ergo-lite-for-logic-coding-f35e9f25f311/</link><pubDate>Fri, 10 May 2019 23:44:37 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/live-demo-integrating-docassemble-and-ergo-lite-for-logic-coding-f35e9f25f311/</guid><description>I posted just over a month ago about having figured out how to get Docassemble and Ergo Lite to play nice with one another, so that it was possible to use logic coding inside a Docassemble interview.
Then, a couple of weeks ago I posted a series about using Ergo Lite to encode LSAT puzzle questions.
So today I’d like to show of a combination of the two.
Encoding LSAT Puzzles for Fun and Profit The preamble of the LSAT puzzle questions that I encoded last week reads like this:</description></item><item><title>A Computer Takes the LSAT: Conclusion</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/a-computer-takes-the-lsat-conclusion-86dc7467b14d/</link><pubDate>Thu, 25 Apr 2019 21:52:12 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/a-computer-takes-the-lsat-conclusion-86dc7467b14d/</guid><description>This is the conclusion to a series of posts about encoding LSAT Puzzles in the Ergo Lite programming language. To start from the beginning, go to the introductory post.
If you’ve followed along this far, thanks for coming along for the ride. I hope it was interesting.
As I said at the beginning, the point is not that now you should now know how to write code in Ergo Lite. Far from it.</description></item><item><title>A Computer Takes the LSAT: Resources</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/a-computer-takes-the-lsat-resources-77e5d07d7e3a/</link><pubDate>Thu, 25 Apr 2019 21:52:08 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/a-computer-takes-the-lsat-resources-77e5d07d7e3a/</guid><description>This is the resources post in a series of posts about encoding LSAT Puzzles in the Ergo Lite programming language. To start from the beginning, go to the introductory post.
If you are interested in learning more about the Ergo Lite programming language, or if you would like to play along with the coding as a learning exercise, here are some useful resources.
The Official LSAT PrepTest from June of 2007 from which the example questions are taken is available online.</description></item><item><title>A Computer Takes the LSAT: Generating Fact Scenarios</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/a-computer-takes-the-lsat-generating-fact-scenarios-3a52fd6fe908/</link><pubDate>Thu, 25 Apr 2019 21:52:03 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/a-computer-takes-the-lsat-generating-fact-scenarios-3a52fd6fe908/</guid><description>This is the third in a series of posts that show how to encode LSAT Puzzles in the Ergo Lite programming language. To start from the beginning, go to the introductory post.
In this post, I will show you how you can use Ergo Lite to automatically generate all possible schedules.
In some of the questions we are going to encode, the question will be whether something is always true or never true about a schedule that adheres to the rules.</description></item><item><title>A Computer Takes the LSAT: Question 6</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/a-computer-takes-the-lsat-question-6-884c47d55b2b/</link><pubDate>Thu, 25 Apr 2019 21:52:00 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/a-computer-takes-the-lsat-question-6-884c47d55b2b/</guid><description>This is the 4th in a series of posts about encoding LSAT questions in the Ergo Lite programming language. To start from the beginning, go to the introductory post.
In this post, we will encode the first of 5 questions using the code we generated earlier.
Question 6 reads as follows:
6. Which one of the following could be a complete and accurate description of the order in which the films are shown at the festival?</description></item><item><title>A Computer Takes the LSAT: Question 7</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/a-computer-takes-the-lsat-question-7-aa98d14d3217/</link><pubDate>Thu, 25 Apr 2019 21:51:56 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/a-computer-takes-the-lsat-question-7-aa98d14d3217/</guid><description>This is the 5th in a series of posts describing how to encode LSAT Puzzles in the Ergo Lite programming language. To start from the beginning, go to the introductory post.
In this post, we will encode Question 7, which reads:
7. Which one of the following CANNOT be true?
(A) Harvest is the last film shown on each day of the festival.
(B) Limelight is shown on each day of the festival.</description></item><item><title>A Computer Takes the LSAT: Question 8</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/a-computer-takes-the-lsat-question-8-bf39194443da/</link><pubDate>Thu, 25 Apr 2019 21:51:52 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/a-computer-takes-the-lsat-question-8-bf39194443da/</guid><description>This is the 6th in a series of posts about encoding LSAT Puzzles in the Ergo Lite programming language. To start from the beginning, go to the introductory post.
In this post, we will encode Question 8. It reads:
8. If Limelight is never shown again during the festival once Greed is shown, then which one of the following is the maximum number of film showings that could occur during the festival?</description></item><item><title>A Computer Takes the LSAT: Question 9</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/a-computer-takes-the-lsat-question-9-f33d7200f48f/</link><pubDate>Thu, 25 Apr 2019 21:51:49 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/a-computer-takes-the-lsat-question-9-f33d7200f48f/</guid><description>This is the 7th in a series of posts describing how to encode LSAT Puzzles in the Ergo Lite programming language. To start from the beginning, go to the introductory post.
In this post, we will encode Question 9, which reads:
9. If Greed is shown exactly three times, Harvest is shown exactly twice, and Limelight is shown exactly once, then which one of the following must be true?</description></item><item><title>A Computer Takes the LSAT: Question 10</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/a-computer-takes-the-lsat-question-10-2172137fdc57/</link><pubDate>Thu, 25 Apr 2019 21:51:46 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/a-computer-takes-the-lsat-question-10-2172137fdc57/</guid><description>This is the 8th in a series of posts about encoding LSAT Puzzles in the Ergo Lite programming language. To start from the beginning, go to the introductory post.
In this post, we will encode the last question, question 10. It reads:
10. If Limelight is shown exactly three times, Harvest is shown exactly twice, and Greed is shown exactly once, then which one of the following is a complete and accurate list of the films that could be the first film shown on Thursday?</description></item><item><title>A Computer Takes the LSAT: The Preamble</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/a-computer-takes-the-lsat-the-preamble-8b25c994ef7c/</link><pubDate>Thu, 25 Apr 2019 21:51:42 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/a-computer-takes-the-lsat-the-preamble-8b25c994ef7c/</guid><description>This is the second in a series of posts demonstrating how to encode LSAT Puzzle questions in the Ergo Lite programming language. To start from the beginning, go to the introductory post.
In this post, we will encode the “preamble” to the section of questions. These are the basic rules that apply to all of the following questions. By analogy to automating legal services, these rules represent statute law or regulations.</description></item><item><title>A Computer Takes the LSAT: Introduction</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/a-computer-takes-the-lsat-introduction-3a65fd8b982/</link><pubDate>Thu, 25 Apr 2019 21:51:33 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/a-computer-takes-the-lsat-introduction-3a65fd8b982/</guid><description>In this series of posts I’m going to show you what it looks like when you use a programming language called Ergo Lite to get a computer to answer puzzle questions from an LSAT exam.
The LSAT is the standardized admissions exam that most lawyers in North America will have suffered through, so I’m hoping it is a sort of shared experience that gives us lawyers a shared starting point.</description></item><item><title>Demo: Logic Coding Inside Docassemble</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/demo-logic-coding-inside-docassemble-b1b60e39d865/</link><pubDate>Mon, 01 Apr 2019 18:13:19 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/demo-logic-coding-inside-docassemble-b1b60e39d865/</guid><description>Logic coding is awesome for automating legal services, and more lawyers should be doing it.-Me.
I’m on a mission to prove that. I’ve got a list of obstacles in front of me that look distinctly like opportunities.
Take for example, the opportunity “programming is hard.” I am working on www.Blawx.com, which aims to make learning it way easier. Check out this short demo video for more details.
Another opportunity is that people don’t know how to get value out of logic programming.</description></item><item><title>Utterly Unpersuasive: Formal Methods and Law</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/utterly-unpersuasive-formal-methods-and-law-bb8ecf048374/</link><pubDate>Mon, 28 Jan 2019 19:43:08 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/utterly-unpersuasive-formal-methods-and-law-bb8ecf048374/</guid><description>This is a story in which Hillel Wayne attempts to answer the question why don’t more programmers use formal methods?
Formal methods are techniques that allow you to say with confidence that your software is right, instead of just trying it and waiting for a bug to show you where the software was wrong.
They can be applied to laws and contracts, too, but aren’t. But should be. That’s why I read the article, to see if there is something that I could learn about how to make formal methods more popular in law.</description></item><item><title>Blawx Prototype Redux</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/blawx-prototype-redux-29e6d7b26786/</link><pubDate>Tue, 08 Jan 2019 00:59:18 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/blawx-prototype-redux-29e6d7b26786/</guid><description>I posted here earlier about a prototype tool that I’m working on to make it easier for lawyers to use declarative programming tools for automating legal reasoning. It’s called “Blawx.”
I spent some more time working on it over the weekend, and made some progress, as you can see in the (now narrated) video linked below.
I have implemented code generation based on the block diagram, implemented the reasoner online with a CGI wrapper so that it can be accessed by the Blawx page, updated the interface to have an answer window at the bottom, and have changed the way that answers are received so that it is possible to get back the answers to questions that have more than one solution.</description></item><item><title>Sorry, but blockchain is not the next revolution in law.</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/sorry-but-blockchain-is-not-the-next-revolution-in-law-14c7f4918b73/</link><pubDate>Thu, 03 Jan 2019 19:57:32 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/sorry-but-blockchain-is-not-the-next-revolution-in-law-14c7f4918b73/</guid><description>I was invited to write a piece as a guest blogger for Slaw.ca, one of the premier legal blogs in Canada, on blockchain nonsense.
If you wonder why so many people 🙄 at the mention of blockchain, it might be useful to you.
Check it out.</description></item><item><title>Blawx: Seeking Feedback on a Prototype Tool for Encoding Law</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/blawx-seeking-feedback-on-a-prototype-tool-for-encoding-law-4b167ae4e634/</link><pubDate>Wed, 02 Jan 2019 09:19:29 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/blawx-seeking-feedback-on-a-prototype-tool-for-encoding-law-4b167ae4e634/</guid><description>I study declarative programming tools for automating legal reasoning in my Computational Law LLM at the University of Alberta. What I have learned is that they are both very powerful, and highly inaccessible for normal legal service providers.
I have had an idea in my head for how to solve that problem for a long time now. I’ve told people about it, but it’s the sort of thing that needs to be shown to be understood.</description></item><item><title>Can Visual Programming Work for Lawyers?</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/can-visual-programming-work-for-lawyers-b9f834fd32c8/</link><pubDate>Thu, 27 Dec 2018 19:12:05 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/can-visual-programming-work-for-lawyers-b9f834fd32c8/</guid><description>I posted the image below to Twitter last night. It is a prototype I’m working on for a legal reasoning programming tool for lawyers.
I got an interesting reply about how visual programming attempts have usually failed, because they don’t scale well with complexity of the code, and they tend not to be integrated with the other software development tools. That sent me on a search for more detail, which led me to this blog post by Mike Hadlow.</description></item><item><title>Innovation Achieved</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/innovation-achieved-a701b8286bb3/</link><pubDate>Wed, 19 Dec 2018 21:11:01 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/innovation-achieved-a701b8286bb3/</guid><description>I believe the access to justice problem cannot be significantly improved in the short or medium term without automating legal services. One of the difficult aspects of automating legal services has been finding a way to automatically get explainable predictions for subjective, discretionary legal issues.
What does that mean with less jargon? Computers have been pretty good, for at least the last 40 years, at telling you whether or not you are a citizen, or what your taxes should be.</description></item><item><title>Integrating Docassemble and Clio: Part 2</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/integrating-docassemble-and-clio-part-2-e38abef66785/</link><pubDate>Fri, 07 Dec 2018 22:31:00 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/integrating-docassemble-and-clio-part-2-e38abef66785/</guid><description>My ABA Innovation Fellowship project, through the ABA’s Centre for Innovation, is docassemble-openlcbr, an open-source tool to bring the power of analogical reasoning to docassemble, the leading open source legal expert system tool.
If you’d like some background, check out my post on why I study expert systems, and my post on introducing analogical reasoning to docassemble.
Clio is the leading cloud-based legal practice management software in North America. Clio has generously agreed to sponsor my fellowship, which has allowed me to expand the scope of project considerably, including by integrating it with Clio.</description></item><item><title>Blockchain Hogwash at Law School</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/blockchain-hogwash-at-law-school-235309152e17/</link><pubDate>Thu, 29 Nov 2018 18:44:13 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/blockchain-hogwash-at-law-school-235309152e17/</guid><description>I’m an LLM student at the University of Alberta studying computational law. One of my advisors recently gave me a copy of a handout that had been provided to some of his undergraduate law students by practitioners who had been invited as guest speakers.
Now, I don’t know who actually attended. What I know is that there are two names on the document. Both of them are partners in a top-10 law firm in Canada.</description></item><item><title>Analogical Reasoning Tool Design, Easy Enough for Lawyers</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/analogical-reasoning-tool-design-easy-enough-for-lawyers-567a774d9cff/</link><pubDate>Tue, 27 Nov 2018 23:56:14 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/analogical-reasoning-tool-design-easy-enough-for-lawyers-567a774d9cff/</guid><description>My ABA Innovation Fellowship project, through the ABA Center for Innovation, is docassemble-openlcbr. It is an open source software package that extends the capabilities of docassemble, a leading open source legal expert system tool.*
(How leading? Of the top 20 web tools announced by the ABA this week, one is docassemble, and two more were built using docassemble. )
Docassemble-openlcbr allows docassemble interview developers to use another open source tool, OpenLCBR, to automate legal reasoning about subjective questions.</description></item><item><title>Integrating Docassemble and Clio</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/integrating-docassemble-and-clio-6c511e30925/</link><pubDate>Tue, 13 Nov 2018 18:10:30 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/integrating-docassemble-and-clio-6c511e30925/</guid><description>Clio is the leading cloud-based legal practice management tool in North America. Clio’s support of my Innovation Fellowship with the ABA Centre for Innovation has given me the opportunity to expand the project in a couple of really interesting ways. Today, I’d like to share with you the first part of that expansion: making it possible to do analogical reasoning about case data held in your Clio account.
docassemble-openlcbr For background, my innovation fellowship project is to add the power of case-based reasoning by analogy provided by the openlcbr tool to the open-source legal expert system and document automation tool docassemble.</description></item><item><title>Automating Case-Based Reasoning By Analogy-A Deep Dive</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/automating-case-based-reasoning-by-analogy-a-deep-dive-a1b015f234dd/</link><pubDate>Wed, 24 Oct 2018 21:14:06 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/automating-case-based-reasoning-by-analogy-a-deep-dive-a1b015f234dd/</guid><description>Next in my series of blog posts on my ABA Center for Innovation Innovation Fellowship, sponsored by Clio, I’d like to show you how a computer does case-based reasoning by analogy by taking a deep dive into the IBP algorithm.
If you’d like to try the live demo of the tool I’m describing, click here.
The Background: IBP In 2003, Kevin Ashley and Stefanie Brüninghaus published a paper in which they described an algorithm they called “Issue Based Prediction” or IBP.</description></item><item><title>Legal Expert Systems Just Got Smarter</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/legal-expert-systems-just-got-smarter-e7e12b75e872/</link><pubDate>Fri, 19 Oct 2018 09:28:19 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/legal-expert-systems-just-got-smarter-e7e12b75e872/</guid><description>For nearly 40 years, the automation of legal services has hit a brick wall when it came to dealing with subjective questions. Until recently, it just wasn’t possible at all. Recently, machine learning has made it possible, but it can’t explain how it came to the conclusion.
We need an automated system that can answer subjective questions, and explain its answers. It is a critical missing tool in the access to justice toolbox.</description></item><item><title>Why I Study ‘Old’ Artificial Intelligence in Law</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/why-i-study-old-artificial-intelligence-in-law-d0abf23e42aa/</link><pubDate>Tue, 09 Oct 2018 22:18:50 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/why-i-study-old-artificial-intelligence-in-law-d0abf23e42aa/</guid><description>I was honoured to be named the ABA Innovation Fellows for 2018/2019. As I go through that fellowship, I want to share my story and the story of my project here. To start, I’d like to give you a little background on myself, and what I study.
I am an LL.M. student 👨‍🎓 in Computational Law 👨‍💻⚖, at the University of Alberta. I’m studying declarative programming languages that can be used to automate legal reasoning.</description></item><item><title>Some Lawyers Should Be Expert Coders</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/some-lawyers-should-be-expert-coders-2e2f6c23b48f/</link><pubDate>Mon, 03 Sep 2018 15:06:42 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/some-lawyers-should-be-expert-coders-2e2f6c23b48f/</guid><description>Another round of “should lawyers learn to code” started up in the Twittersphere this week. The arguments against it are not new.
“Lawyers should learn to work with coders, not be coders.” “Specialization of skills is better than a person who tries to know everything.” “Lawyers don’t need to learn to code, they need to learn to use Microsoft Word properly.” The defenders pipe up and say:
“There is a difference between teaching someone to code, and making them a developer.</description></item><item><title>An Ontology of Law and Technology</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/an-ontology-of-law-and-technology-750ebcc1a12d/</link><pubDate>Thu, 28 Jun 2018 23:17:52 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/an-ontology-of-law-and-technology-750ebcc1a12d/</guid><description>I propose the following ontology in order to describe intersections of law and technology. The defining factors are a) the relationship between law and technology, and b) the value proposition of the tool.
With regard to the relationship, it seems to me that there are the following alternatives:
Law for Technology Technology for Law The first category, L4T, includes things like intellectual property laws. It is legal rules that pertain to innovative methods of doing things.</description></item><item><title>The 3 technologies that won’t shake up the legal world in 2018.</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/the-3-technologies-that-wont-shake-up-the-legal-world-in-2018-b251c53b1b55/</link><pubDate>Mon, 08 Jan 2018 22:13:22 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/the-3-technologies-that-wont-shake-up-the-legal-world-in-2018-b251c53b1b55/</guid><description>I’m a pro-technology lawyer. Like really pro-technology. But I’m depressed at the state of the reporting of technology in the legal field, generally. The Lawyer Daily posted a story entitled “Three technologies that will shake up the legal world in 2018,” and I read the first sentence and stopped caring.
Their three technologies are artificial intelligence, blockchain, and the cloud.
Artificial Intelligence is not going to shake up the legal world in 2018.</description></item><item><title>What I Learned at Law and Formal Logic Summer School</title><link>https://JasonMorrisSC.github.io/post/roundtablelaw/what-i-learned-at-law-and-formal-logic-summer-school-17e02b2cdb1f/</link><pubDate>Wed, 26 Jul 2017 17:11:12 +0000</pubDate><guid>https://JasonMorrisSC.github.io/post/roundtablelaw/what-i-learned-at-law-and-formal-logic-summer-school-17e02b2cdb1f/</guid><description>In the Piazza del Duomo in Florence, Italy, just next to a gelato store, and behind the caricature artists selling three-minute masterpieces to tourists, there is a statue of the architect Brunelleschi. His eyes are lifted skyward and to the right, and on his face is an expression of thoughtfulness, hope, and perhaps a hint of concern.
He had every reason to be concerned.
If one follows the statue’s gaze, one sees that it is looking at the dome atop the Florence Cathedral, known as the Duomo.</description></item></channel></rss>